-- The MIT License (MIT)-- Copyright 2015 Siney/Pangweiwei siney@yeah.net
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.

local setmetatable=setmetatable
local clamp=clamp
local acos=math.acos
local sin=math.sin
local cos=math.cos
local sqrt=math.sqrt
local error=error
local min=math.min
local max=math.max
local abs=math.abs
local Time=UnityEngine.Time

local ToAngle=57.29578
local Epsilon=0.00001
local Infinite=1/0

local Matrix3x3={}
UnityEngine.Matrix3x3=Matrix3x3

function Matrix3x3.SetAt(m,row,col,v)
	m[row*3+col+1]=v
end

function Matrix3x3.New()
	local r={1,0,0,0,1,0,0,0,1}
	setmetatable(r,Matrix3x3)
	return r
end

function Matrix3x3.__tostring(m)
	return string.format("Matrix3x3(%f,%f,%f,%f,%f,%f,%f,%f,%f)"
		,m[1],m[2],m[3]
		,m[4],m[5],m[6]
		,m[7],m[8],m[9])
end

function Matrix3x3.SetAxisAngle(m,axis,rad)
	-- This function contributed by Erich Boleyn (erich@uruk.org) */
	-- This function used from the Mesa OpenGL code (matrix.c)  */
	local s, c
	local vx, vy, vz, xx, yy, zz, xy, yz, zx, xs, ys, zs, one_c

	s = sin (rad)
	c = cos (rad)

	vx = axis[1]
	vy = axis[2]
	vz = axis[3]

	xx = vx * vx
	yy = vy * vy
	zz = vz * vz
	xy = vx * vy
	yz = vy * vz
	zx = vz * vx
	xs = vx * s
	ys = vy * s
	zs = vz * s
	one_c = 1.0 - c
	local Set=Matrix3x3.SetAt
	Set(m,0,0, (one_c * xx) + c )
	Set(m,1,0, (one_c * xy) - zs)
	Set(m,2,0, (one_c * zx) + ys)
	Set(m,0,1, (one_c * xy) + zs)
	Set(m,1,1, (one_c * yy) + c )
	Set(m,2,1, (one_c * yz) - xs)
	Set(m,0,2, (one_c * zx) - ys)
	Set(m,1,2, (one_c * yz) + xs)
	Set(m,2,2, (one_c * zz) + c )
end

function Matrix3x3.Mul(m,v)
	local res=Vector3.New(0,0,0)
	res[1] = m[1] * v[1] + m[4] * v[2] + m[7] * v[3]
	res[2] = m[2] * v[1] + m[5] * v[2] + m[8] * v[3]
	res[3] = m[3] * v[1] + m[6] * v[2] + m[9] * v[3]
	return res
end